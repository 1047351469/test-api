type IsPlainObject<T> =
  T extends object
    ? T extends Function
      ? false
      : T extends any[]
        ? false
        : T extends string
          ? false
          : true
    : false;

type ExtractLayerAsString<
  T,
  TargetDepth extends number,
  CurrentDepth extends any[] = []
> = CurrentDepth['length'] extends TargetDepth
  ? IsPlainObject<T> extends true
    ? { [K in keyof T]: string }
    : never
  : IsPlainObject<T> extends true
    ? {
        [K in keyof T]: ExtractLayerAsString<
          T[K],
          TargetDepth,
          [...CurrentDepth, 1]
        >
      }[keyof T]
    : never;


type Original = {
  a: {
    x: {
      i: number;
      j: boolean;
    };
    y: string;
  };
  b: number;
};

type Result = ExtractLayerAsString<Original, 2>;
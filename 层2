type IsPlainObject<T> =
  T extends object
    ? T extends Function | any[] | string
      ? false
      : true
    : false;

type ExtractOnlyLayerAsString<
  T,
  TargetDepth extends number,
  CurrDepth extends any[] = []
> = CurrDepth['length'] extends TargetDepth
  ? IsPlainObject<T> extends true
    ? { [K in keyof T]: string }
    : {}
  : IsPlainObject<T> extends true
    ? {
        [K in keyof T]: ExtractOnlyLayerAsString<T[K], TargetDepth, [...CurrDepth, 1]>
      }[keyof T] extends infer U
      ? U extends object
        ? { [K in keyof U]: U[K] }
        : {}
      : {}
  : {};
 type IsPlainObject<T> =
  T extends object
    ? T extends Function
      ? false
      : T extends any[]
        ? false
        : T extends string
          ? false
          : true
    : false;

// 工具类型：合并联合类型为一个对象
type UnionToIntersection<U> =
  (U extends any ? (k: U) => void : never) extends ((k: infer I) => void)
    ? I
    : never;

// 提取某一层并展平成字符串类型
type ExtractExactLayerAsFlatString<
  T,
  Depth extends number,
  Curr extends any[] = []
> = Curr['length'] extends Depth
  ? IsPlainObject<T> extends true
    ? { [K in keyof T]: string }
    : {}
  : IsPlainObject<T> extends true
    ? UnionToIntersection<{
        [K in keyof T]: ExtractExactLayerAsFlatString<
          T[K],
          Depth,
          [...Curr, 1]
        >;
      }[keyof T]>
    : {};
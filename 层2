type ExtractLayer<T, Depth extends number, C extends any[] = []> =
  C['length'] extends Depth
    ? T extends object
      ? { [K in keyof T]: string }
      : {}
    : T extends object
      ? ExtractLayerInner<T, Depth, [...C, 1]>
      : {};

type ExtractLayerInner<T, Depth extends number, C extends any[]> = {
  [K in keyof T]: ExtractLayer<T[K], Depth, C>
} extends infer O
  ? O extends object
    ? Flatten<O>
    : {}
  : {};

type Flatten<T> = {
  [K in keyof T]: T[K]
};
solo rounded
  prepend-inner-icon="mdi-magnify"
        @click:prepend-inner="handlePrependInnerClick"

<template>
  <div class="search-container">
    <!-- 搜索输入框 -->
    <v-text-field
      v-model="searchQuery"
      label="Search"
      prepend-inner-icon="mdi-magnify"
      clearable
      @input="handleInput"
    ></v-text-field>

    <!-- 搜索结果 -->
    <div class="search-results" v-if="results.length">
      <ul>
        <li v-for="(result, index) in results" :key="index">{{ result }}</li>
      </ul>
    </div>
  </div>
</template>

<script setup>
  import { ref } from 'vue'

  // 搜索关键词
  const searchQuery = ref('')
  // 搜索结果
  const results = ref([])
  // 定时器
  let timer = null

  // 模拟接口请求
  function mockApi(query) {
    return new Promise(resolve => {
      setTimeout(() => {
        const data = ['Result 1', 'Result 2', 'Result 3'].filter(item =>
          item.toLowerCase().includes(query.toLowerCase())
        )
        resolve(data)
      }, 500) // 模拟 500ms 的接口延迟
    })
  }

  // 输入处理
  function handleInput() {
    clearTimeout(timer) // 清除上一次的定时器
    if (!searchQuery.value.trim()) {
      results.value = [] // 清空结果
      return
    }
    timer = setTimeout(async () => {
      results.value = await mockApi(searchQuery.value) // 获取搜索结果
    }, 300) // 设置防抖延迟
  }
</script>

<style scoped>
  .search-container {
    position: relative; /* 父容器相对定位 */
    max-width: 400px;
    margin: 50px auto;
  }

  .search-results {
    position: absolute; /* 结果绝对定位 */
    top: 100%; /* 距离输入框底部 */
    left: 0;
    width: 100%;
    background: white;
    border: 1px solid #ccc;
    border-radius: 4px;
    z-index: 10;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  }

  .search-results ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .search-results li {
    padding: 8px 12px;
    cursor: pointer;
  }

  .search-results li:hover {
    background: #f5f5f5;
  }
</style>

type IsPlainObject<T> =
  T extends object
    ? T extends Function
      ? false
      : T extends any[]
        ? false
        : T extends string
          ? false
          : true
    : false;

type ExtractExactLayerAsFlatString<
  T,
  Depth extends number,
  Curr extends any[] = []
> = Curr['length'] extends Depth
  ? IsPlainObject<T> extends true
    ? { [K in keyof T]: string }
    : {}
  : IsPlainObject<T> extends true
    ? {
        [K in keyof T]: ExtractExactLayerAsFlatString<T[K], Depth, [...Curr, 1]>
      }[keyof T] // 展平下一层
    : {};